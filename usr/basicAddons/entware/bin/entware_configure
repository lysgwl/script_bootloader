 #!/bin/sh

: "	
	entware环境配置
"

SERVICE_MODULE_NAME="entware"

# entware脚本根目录
ENTWARE_PRIVATE_ROOT="${BASIC_ADDONS_PATH}/entware"

# entware脚本usr目录
ENTWARE_PRIVATE_USR="${ENTWARE_PRIVATE_ROOT}/usr"

# entware脚本下载文件
ENTWARE_DOWNLOAD_SCRIPT="${ENTWARE_PRIVATE_USR}/install.sh"

# entware缺省URL
ENTWARE_DEFAULT_URL_PATH="http://bin.entware.net"

# entware脚本环境路径
ENTWARE_RUNENV_PATH="/opt/etc/init.d/rc.unslung"	#/opt/etc/init.d/rc.unslung	#${ENTWARE_SYSTEM_PATH}/etc/init.d/rc.unslung

# entware配置文件
ENTWARE_OPKGETC_PATH="/opt/etc/opkg.conf"

# 设置entware环境
setEntwareEnv()
{
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: setting the ${SERVICE_MODULE_NAME} environment!"
	
	if [ $1 == ${SCRIPT_INIT_FLAG} ] || [ $1 == ${SCRIPT_BOOT_FLAG} ]; then
		if [ $1 == ${SCRIPT_INIT_FLAG} ] && [ ! -e "/root/.wget-hsts" ]; then
			if [ ! -L "/root" ]; then
				echo "" > "/root/.wget-hsts"
				chmod 644 "/root/.wget-hsts"
			fi
		fi
		
		if [ ! -d "${ENTWARE_SYSTEM_PATH}" ]; then
			mkdir "${ENTWARE_SYSTEM_PATH}"
		fi
		
		if [ ! -d "${ENTWARE_PRIVATE_USR}" ]; then
			mkdir "${ENTWARE_PRIVATE_USR}"
		fi
	fi
	
	if [ -L "/opt" ]; then
		# 设置OPT_TARGET为符号链接文件/opt的目标
		OPT_TARGET="$(ls -al "/opt") | sed -E -n -e 's#.*->[[:space:]]+([^[:space:]]+.*)$#/\1#p'"
		
		if [ $1 == ${SCRIPT_INIT_FLAG} ] || [ $1 == ${SERVICE_OPEN_FLAG} ]; then
			ln -fs "${ENTWARE_SYSTEM_PATH}" "${OPT_TARGET}"
		elif [ $1 == ${SCRIPT_UNINIT_FLAG} ] || [ $1 == ${SERVICE_CLOSE_FLAG} ]; then
			rm -f "${OPT_TARGET}"
		fi
		
	elif [ -d "/opt" ]; then
		if [ $1 == ${SCRIPT_INIT_FLAG} ] || [ $1 == ${SERVICE_OPEN_FLAG} ]; then
			if ! grep -qs '/opt' /proc/mounts; then
				fileList=$(ls -al '/opt' | sed -E -n -e 's/^[^l[:space:]]{10}.*[[:digit:]:]+[[:space:]]+(.*[^.])$/\1/p')
				
				echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: backing up opt directory file!"
				
				while [ 1 ]; do
					STACK_TOP=`echo $fileList | sed -n '1p'` #head -n 1
					if [ -z "${STACK_TOP}" ]; then
						break
					else
						srcPath=$(echo ${STACK_TOP} | sed "s#^#/opt/#")
						descPath=$(echo ${STACK_TOP} | sed "s#^#`echo ${ENTWARE_SYSTEM_PATH}`/#")
						
						if [ ! -e "${descPath}" ]; then
							cp -rf "${srcPath}" "${ENTWARE_SYSTEM_PATH}"
						fi
						
						fileList=$(echo $fileList | sed '1d' | sed '/^$/d')
					fi
				done
				
				mount "${ENTWARE_SYSTEM_PATH}" "/opt"
			fi
		elif [ $1 == ${SCRIPT_UNINIT_FLAG} ] || [ $1 == ${SERVICE_CLOSE_FLAG} ]; then
			if grep -qs '/opt' /proc/mounts; then
				umount "/opt"
			fi
		fi
	fi
}

# 设置用户挂载点
setEntwareMount()
{
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: setting the ${SERVICE_MODULE_NAME} mount!"
	
	if [ $1 == ${SCRIPT_INIT_FLAG} ] || [ $1 == ${SERVICE_OPEN_FLAG} ]; then
		if [ $1 == ${SCRIPT_INIT_FLAG} ]; then
			# 备份密码文件
			if [ -d "${ENTWARE_SYSTEM_PATH}/etc" ]; then
				cp -f "/etc/passwd" "${ENTWARE_SYSTEM_PATH}/etc/passwd_firmware"
				cp -f "/etc/shadow" "${ENTWARE_SYSTEM_PATH}/etc/shadow_firmware"
				
				echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: backing up firmware password file!"
			fi
		fi
		
		# root目录挂载点
		if [ ! -d "${ENTWARE_SYSTEM_PATH}/home/root" ]; then
			if [ ! -d "${ENTWARE_SYSTEM_PATH}/home" ]; then
				mkdir "${ENTWARE_SYSTEM_PATH}/home"
			fi
			
			cp -rfH "/root" "${ENTWARE_SYSTEM_PATH}/home"
			echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: backing up directory home files!"
		fi
		
		if ! grep -qs '/tmp/home' /proc/mounts; then
			mount "${ENTWARE_SYSTEM_PATH}/home" "/tmp/home"
		fi
	elif [ $1 == ${SCRIPT_UNINIT_FLAG} ] || [ $1 == ${SERVICE_CLOSE_FLAG} ]; then
		# 卸载root目录挂载
		if grep -qs '/tmp/home' /proc/mounts; then
			umount "/tmp/home"
		fi
	fi
}

# 安装entware环境
installEntwareEnv()
{
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: install the ${SERVICE_MODULE_NAME} environment!"
	
	# 初始化安装
	if [ "$(which opkg)" != "/opt/bin/opkg" ]; then
		HOST_PATH="${ENTWARE_HOST}"
		if [ -z "${HOST_PATH}" ]; then
			HOST_PATH="${ENTWARE_DEFAULT_URL_PATH}"
		fi
		
		case "${SYSTEM_ARCH}" in
			"aarch64")				
				fileName="${SERVICE_MODULE_NAME}-aarch64"
				
				ENTWARE_NAME="aarch64-k3.10"
				ENTWARE_URL="${HOST_PATH}/${ENTWARE_NAME}/installer/generic.sh"
				;;
			"armv7l")				
				fileName="${SERVICE_MODULE_NAME}-armv7"
				
				ENTWARE_NAME="armv7sf-k3.2"
				ENTWARE_URL="${HOST_PATH}/${ENTWARE_NAME}/installer/generic.sh"
				;;
			*)
				echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: router architecture is unknown!"
				exit 1
				;;
		esac
		
		filePath=$(find "${ENTWARE_PRIVATE_USR}" -name "{fileName}*.tar.gz" | sort -s | tail -n 1)

		if [ -z "${filePath}" ]; then
			wget -O - "${ENTWARE_URL}" | sh
		else
			tar -xzvf "${filePath}" -C "${ENTWARE_PRIVATE_USR}" > /dev/null 2>&1
		fi
		
		urlPath="${HOST_PATH}/${ENTWARE_NAME}"
		
		if [ -e "${ENTWARE_OPKGETC_PATH}" ]; then
			url=`grep '^.*src/gz entware' "${ENTWARE_OPKGETC_PATH}" | cut -d " " -f 3`

			if [ -z "`echo ${url} | grep "${HOST_PATH}"`" ]; then
				sed -i 's#'"${url}"'#'"${urlPath}"'#' "${ENTWARE_OPKGETC_PATH}"
			fi
			
			/opt/bin/opkg update
		fi
	fi
}

# 运行entware环境
execEntwareEnv()
{
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: runing the ${SERVICE_MODULE_NAME} environment!"
	
	if [ -e "${ENTWARE_RUNENV_PATH}" ]; then
		if [ $1 == ${SCRIPT_INIT_FLAG} ] || [ $1 == ${SCRIPT_BOOT_FLAG} ]; then
			"${ENTWARE_RUNENV_PATH}" start
		elif [ $1 == ${SCRIPT_UNINIT_FLAG} ] || [ $1 == ${SERVICE_CLOSE_FLAG} ]; then
			"${ENTWARE_RUNENV_PATH}" stop
		fi
	fi
}

# 2:开启entware服务
openEntwareService()
{
	# 设置entware环境
	setEntwareEnv $1
	
	# 执行entware环境
	execEntwareEnv $1
	
	# 设置用户挂载点
	setEntwareMount $1
}

# 3:关闭entware服务
closeEntwareService()
{
	# 运行entware环境
	execEntwareEnv $1
	
	# 设置entware环境
	setEntwareEnv $1
	
	# 设置用户挂载点
	setEntwareMount $1
}

# 1:初始化entware环境
initEntwareEnv()
{	
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ${SERVICE_FUNCTION} the ${SERVICE_MODULE_NAME}!"
	
	if [ "$(which opkg)" != "/opt/bin/opkg" ]; then
		# 设置entware环境
		setEntwareEnv $1
		
		# 下载entware环境
		installEntwareEnv $1
		
		# 设置用户挂载点
		setEntwareMount $1
		
		# 执行entware环境
		execEntwareEnv $1
	fi
	
	echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} the ${SERVICE_MODULE_NAME}!"
}

# 0:释放entware环境
uninitEntwareEnv()
{
	echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ${SERVICE_FUNCTION} the ${SERVICE_MODULE_NAME}!"
	
	# 运行entware环境
	execEntwareEnv $1
	
	# 设置entware环境
	setEntwareEnv $1
	
	# 设置用户挂载点
	setEntwareMount $1
	
	echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} the ${SERVICE_MODULE_NAME}!"
}

case $1 in
	${SCRIPT_UNINIT_FLAG})
		# 0:释放entware环境
		uninitEntwareEnv $1
		;;
	${SCRIPT_INIT_FLAG})
		# 1:初始化entware环境
		initEntwareEnv $1
		;;
	${SERVICE_OPEN_FLAG})
		# 2:开启entware服务
		openEntwareService $1
		;;
	${SERVICE_CLOSE_FLAG})
		# 3:关闭entware服务
		closeEntwareService $1
		;;
	*)
		;;
esac